"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Money @scalar(class: "App\\GraphQL\\Scalars\\Money")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    post(id: ID! @eq): Post @find
    posts: [Post!]! @paginate(defaultCount: 10)

    category(id: ID! @eq): Category @find
    categories: [Category!]! @paginate(defaultCount: 10)

    book(id: ID! @eq): Book @find
    books: [Book!]! @paginate(defaultCount: 10)
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type Post {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique slug."
    slug: String!

    content: String!
    excerpt: String!

    category: Category! @belongsTo
}

type Category {
    id: ID!
    name: String!
    default: Boolean!
    posts: [Post!]! @hasMany
}

type Author {
    id: ID!
    first_name: String!
    last_name: String!
    patronymic: String
    email: String!
    biography: String
    books: [Book!]! @belongsToMany
}

type Book {
    id: ID!
    isbn: String!
    title: String!
    price: Money!
    page: String!
    year: String!
    excerpt: String!
    authors: [Author!]! @belongsToMany
}

type Mutation {
    createPost(
        name: String!
        excerpt: String
        content: String!
        category_id: ID!
        slug: String! @rules(apply: ["unique:posts,slug"])
    ): Post @create

    deletePost(id: ID!): Post @delete

    createBook(input: CreateBookInput! @spread): Book @create
}

input CreateBookInput {
    isbn: String! @rules(apply: ["unique:books,isbn"])
    title: String!
    price: String!
    page: String!
    year: String!
    excerpt: String!
    authors: CreateAuthorBelongsToMany
}

input CreateAuthorBelongsToMany {
  create: [CreateAuthorInput!]
  connect: [ID!]
  sync: [ID!]
}

input CreateAuthorInput {
    first_name: String!
    last_name: String!
    patronymic: String
    email: String!
}
